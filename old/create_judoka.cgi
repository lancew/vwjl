#!/usr/bin/perl -w
use strict;
use warnings;

use CGI qw(:standard);
use lib './MyLib';
use DBI;

print header();
print start_html("e-Judo Test Area");
print h1("CREATE NEW JUDOKA");

if ( param("id") ) {
    my $user_id   = param("id");
    my @user_data = get_user_data($user_id);

    my $judoka_limit = $user_data[11];
    my $judoka_count = judoka_count($user_id);

    if ( $judoka_count >= $judoka_limit ) {
        print p("SORRY!!, Judoka Limit reached.");
        print p("You can create no more Judoka");
        print p(
            "-> <a href='main_menu.cgi?id=$user_id'>Click HERE to continue</a>"
        );
    }

    print_judoka_data_form($user_id);
}
else {
    my @temp_data  = collect_judoka_data();
    my @temp_data2 = validate_judoka_data(@temp_data);
    my @temp_data3 = generate_initial_values(@temp_data2);

    add_judoka_to_db(@temp_data3);
}

print end_html;    # this closes the web page properly

# Sub routines
# --------------

sub get_user_data {
    my $entered_id = shift;

    my $dbh = DBI->connect('dbi:AnyData(RaiseError=>1):');
    $dbh->func( 'users', 'CSV', 'data/users_csv', 'ad_catalog' );

    # select from the datafile the id for the user ID from the array
    # passed from the previous sub routine
    my @parameters = ($entered_id);
    my $sql        = "SELECT * FROM users WHERE id = ?";

    my $sth = $dbh->prepare($sql);    # prepare the SQL command
    $sth->execute(@parameters);       # excecute the SQL using our parameters

    my @result = $sth->fetchrow_array;
    $dbh->disconnect();

    return (@result);
}

sub judoka_count {
    my $entered_id = shift;

    my $dbh = DBI->connect('dbi:AnyData(RaiseError=>1):');
    $dbh->func( 'judoka', 'CSV', 'data/judoka_csv', 'ad_catalog' );

    # select from the datafile the id for the user ID from the array
    # passed from the previous sub routine
    my $sql = "SELECT * FROM judoka WHERE user_id = ?";

    my @params = ($entered_id);

    my $sth = $dbh->prepare($sql);
    $sth->execute(@params);

    my $row_count = 0;
    my @results;
    while ( @results = $sth->fetchrow_array ) {
        $row_count++;
    }

    $dbh->disconnect();
    return ($row_count);
}

sub print_judoka_data_form {

# Data fields: user_id,judoka_id,name,start_date,dojo,country,date_of_birth,weight,active,sensei,wins,losses,bio,password,strength,fitness,speed,ki,injury_level,injury_desc,total_shiai,earnings,cash,grade,retired,activity_points,experience_points,strategy_1,strategy_2,strategy_3,strategy_4,strategy_5,strategy_6,strategy_7,strategy_8,strategy_9,strategy_10,strategy_11,strategy_12,strategy_13,strategy_14,strategy_15,jami_juji_jime,gyaku_juji_jime,kata_juji_jime,hadaka_jime,okuri_eri_jime,kata_ha_jime,katate_jime,ryote_jime,sode_guruma_jime,tsukkomi_jime,sankaku_jime,ude_garami,ude_hishigi_juji_gatame,ude_hishigi_ude_gatame,ude_hishigi_hiza_gatame,ude_hishigi_waki_gatame,ude_hishigi_hara_gatame,ude_hishigi_ashi_gatame,ude_hishigi_te_gatame,ude_hishigi_sankaku_gatame,hon_kesa_gatame,kuzure_kesa_gatame,kata_gatame,kami_shiho_gatame,kuzure_kami_shiho_gatame,yoko_shiho_gatame,tate_shiho_gatame,de_ashi_harai,hiza_guruma,sasae_tsurikomi_ashi,uki_goshi,osoto_gari,o_goshi,ouchi_gari,seoi_nage,kosoto_gari,kouchi_gari,koshi_guruma,tsurikomi_goshi,okuri_ashi_harai,tai_otoshi,harai_goshi,uchi_mata,kosoto_gake,tsuri_goshi,yoko_otoshi,ashi_guruma,hane_goshi,harai_tsurikomi_ashi,tomoe_nage,kata_guruma,sumi_gaeshi,tani_otoshi,hane_makikomi,sukui_nage,utsuri_goshi,o_guruma,soto_makikomi,uki_otoshi,osoto_guruma,uki_waza,yoko_wakare,yoko_guruma,ushiro_goshi,ura_nage,sumi_otoshi,yoko_gake,morote_gari,kuchiki_taoshi,kibisu_gaeshi,uchi_mata_sukashi,tsubame_gaeshi,osoto_gaeshi,ouchi_gaeshi,kouchi_gaeshi,hane_goshi_gaeshi,harai_goshi_gaeshi,uchi_mata_gaeshi,osoto_makikomi,uchi_mata_makikomi,harai_makikomi
#                          *       *               *     *          *         *             *                 *
#                  0        1      2        3      4     5          6         7       8     9     10     11   12    13        14 ...
# All the fields with "*" under them are  generated by the user
# The numbers indicate their position in the array(s)

    my @internal_user_data = @_;
    my $user_id_passed     = $internal_user_data[0];
    print hr, start_form;    # create a form using CGI.PM
    print p(
        "Judoka Full Name: ",
        textfield("judoka_name"),
        " - This is your Judoka name (fullname)"
    );
    print p( "Judoka Dojo: ",
        textfield("dojo"),
        " - This is the Dojo that your Judoka will belong to" );
    print p( "Judoka Country: ",
        textfield("country"),
        " - This is which country your Judoka is from" );
    print p(
        "Judoka Date of Birth: ",
        textfield("date_of_birth"),
        " - the date of birth (Fictional) for this Judoka."
    );
    print p( "Judoka Weight: ",
        textfield("weight"), " - the weight of your Judoka in Kilograms" );
    print p( "Judoka Sensei: ",
        textfield("sensei"),
        " - the name of the Sensei (fictional) who teaches your Judoka" );
    print p( "Judoka Biography: ",
        textfield("bio"),
        " - a brief biography of your Judoka, some backgrond info" );
    print hidden( -name => "user_id", -value => "$user_id_passed" );
    print submit( -name => 'submit button' );
    print end_form, hr;    # end the form
}

sub collect_judoka_data {
    # This subroutine collects the user input from the
    # form and returns it to the next form

    my @judoka_data;
    $judoka_data[0] = param("user_id");

    $judoka_data[1]  = "BLANK";
    $judoka_data[2]  = param("judoka_name");
    $judoka_data[3]  = "blank";
    $judoka_data[4]  = param("dojo");
    $judoka_data[5]  = param("country");
    $judoka_data[6]  = param("date_of_birth");
    $judoka_data[7]  = param("weight");
    $judoka_data[8]  = "blank";
    $judoka_data[9]  = param("sensei");
    $judoka_data[10] = "blank";
    $judoka_data[11] = "blank";
    $judoka_data[12] = param("bio");
    return (@judoka_data);    # return the collected data
}

sub validate_judoka_data {
    # This sub routine validate the user input from collect_judoka_data
    my @internal_user_data = @_;

    return (@internal_user_data);

}

sub generate_initial_values {
# This sub routinegenerates the variable data not inputed by the user (the initial variables)
# Data fields: user_id,judoka_id,name,start_date,dojo,country,date_of_birth,weight,active,sensei,wins,losses,bio,password,strength,fitness,speed,ki,injury_level,injury_desc,total_shiai,earnings,cash,grade,retired,activity_points,experience_points,strategy_1,strategy_2,strategy_3,strategy_4,strategy_5,strategy_6,strategy_7,strategy_8,strategy_9,strategy_10,strategy_11,strategy_12,strategy_13,strategy_14,strategy_15,jami_juji_jime,gyaku_juji_jime,kata_juji_jime,hadaka_jime,okuri_eri_jime,kata_ha_jime,katate_jime,ryote_jime,sode_guruma_jime,tsukkomi_jime,sankaku_jime,ude_garami,ude_hishigi_juji_gatame,ude_hishigi_ude_gatame,ude_hishigi_hiza_gatame,ude_hishigi_waki_gatame,ude_hishigi_hara_gatame,ude_hishigi_ashi_gatame,ude_hishigi_te_gatame,ude_hishigi_sankaku_gatame,hon_kesa_gatame,kuzure_kesa_gatame,kata_gatame,kami_shiho_gatame,kuzure_kami_shiho_gatame,yoko_shiho_gatame,tate_shiho_gatame,de_ashi_harai,hiza_guruma,sasae_tsurikomi_ashi,uki_goshi,osoto_gari,o_goshi,ouchi_gari,seoi_nage,kosoto_gari,kouchi_gari,koshi_guruma,tsurikomi_goshi,okuri_ashi_harai,tai_otoshi,harai_goshi,uchi_mata,kosoto_gake,tsuri_goshi,yoko_otoshi,ashi_guruma,hane_goshi,harai_tsurikomi_ashi,tomoe_nage,kata_guruma,sumi_gaeshi,tani_otoshi,hane_makikomi,sukui_nage,utsuri_goshi,o_guruma,soto_makikomi,uki_otoshi,osoto_guruma,uki_waza,yoko_wakare,yoko_guruma,ushiro_goshi,ura_nage,sumi_otoshi,yoko_gake,morote_gari,kuchiki_taoshi,kibisu_gaeshi,uchi_mata_sukashi,tsubame_gaeshi,osoto_gaeshi,ouchi_gaeshi,kouchi_gaeshi,hane_goshi_gaeshi,harai_goshi_gaeshi,uchi_mata_gaeshi,osoto_makikomi,uchi_mata_makikomi,harai_makikomi
#                          *       *               *     *          *         *             *                 *
#                  0        1      2        3      4     5          6         7       8     9     10     11   12    13        14 ...
# All the fields with "*" under them are  generated by the user
# The numbers indicate their position in the array(s)
# user_id is already in the data array at this stage.

    my @internal_user_data = @_;
    $internal_user_data[1] = $internal_user_data[0]
        . $internal_user_data[2]
        ; # Make the unique ID for this Judoka the users ID plus the Judoka name.
    $internal_user_data[3]  = gmtime();    # Set start date to now
    $internal_user_data[8]  = "NO";        # ACTIVE - Set to no initially
    $internal_user_data[10] = 0;           # WINS - set to zero initially
    $internal_user_data[11] = 0;           # LOSSES - set to zero
    $internal_user_data[13]
        = "default";  # PASSWORD - set this to default (well at least for now)
    $internal_user_data[14] = 0;    # STRENGTH - set this to zero for now
    my $loop;                       # Initialise a variable to use for a loop

    for ( $loop = 15; $loop < 124; $loop++ )
    {    # Loop from 15 to the last variable (there are 123)
        $internal_user_data[$loop] = 0
            ;   # This line sets all the remaining variables in the array to 0
    }

    return (@internal_user_data);
}

sub add_judoka_to_db {
    my @internal_user_data = @_;

    my $entered_judoka_id = $internal_user_data[1];
    my $dbh               = DBI->connect('dbi:AnyData(RaiseError=>1):');
    $dbh->func( 'judoka', 'CSV', 'data/judoka_csv', 'ad_catalog' );

    my $sql    = "SELECT * FROM judoka WHERE judoka_id = ?";
    my @params = ($entered_judoka_id);

    my $sth = $dbh->prepare($sql);    # prepare the SQL command
    $sth->execute(@params);           # excecute the SQL using our parameters

    my @result = $sth->fetchrow_array;
    $dbh->disconnect();

    if (@result)
    {  #if the result array is in existence (ie we found the username) then...
        print p("Sorry this ID is in use already");
    }
    else {
        # if the judoka_id does not exist then add them!
        # so connect to the database
        my $dbh = DBI->connect('dbi:AnyData(RaiseError=>1):');
        $dbh->func( 'judoka', 'CSV', 'data/judoka_csv', 'ad_catalog' );

        # add the data into a new record
        my $sql
            = "INSERT INTO judoka VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,? )"
            ; # this is the SQL command we want to execute, there SHOULD be 123 question marks
        my @params = (@internal_user_data);

        my $sth = $dbh->prepare($sql); # prepare the SQL command
        $sth->execute(@params);        # excecute the SQL using our parameters

        print p("Judoka Created");     # just a reference in debug mode
        print p(
            "-> <a href='main_menu.cgi?id=$internal_user_data[0]'>Click HERE to continue</a>"
        );
    }
}

# end of subroutines
# -------------------

# ---------------------------------------------
# create_judoka.cgi   - Create by Lance Wicks
#                       e-judo.sourceforge.net
# This is free open source software! Released under GPL
#
# Description:
# This script adds a new Judoka to the Judoka database
#
# How does it work?
# =================
# We get the user data, and then the users Judoka data, if there Judoka Limit (from user data) is bigger than the number of Judoka records
# Then they are allowed to create a new Judoka and we do this, else they are told they can't create a new Judoka.
#
# History:
# ========
# 03 January 2004, Lance Wicks - File created
# 05 January 2004, Lance Wicks - Finished initial work, can now add records to the database successfully
