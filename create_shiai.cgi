#!/usr/bin/perl -w
use strict;
use warnings;

our $DEBUG = 1;    #  If this is set to 1 then we see the debug messages.

use CGI qw(:standard); 
use lib './MyLib';
use DBI;

# main code block
# ---------------

print header();
print start_html("e-Judo Test Area");
print h1("CREATE NEW SHIAI");

if ( param("id") ) { 
    # the ID parameter should be present when they first 
    # arrive and not when the form is filled in, so if it
    # does exist we need to do the lines below
    
    my $user_id = param("id");
    my @user_data = get_user_data($user_id);
    my $shiai_limit = $user_data[12];
    my $shiai_count = shiai_count($user_id);

    if ( $shiai_count >= $shiai_limit ) { 
        # If they have already created all the Judoka 
        # they are allowed return to main menu
        print p("SORRY!!, Shiai Limit reached.");
        print p("You can create a new Shiai");
        print p(
            "-> <a href=main_menu.cgi?id=$user_id>Click HERE to continue</a>"
        );
    } 
    
    # if the User has NOT entered any data then call the form 
    # and add user to the DB
    print_shiai_data_form($user_id);
}
else {
    my @temp_data  = collect_shiai_data();
    my @temp_data2 = validate_shiai_data(@temp_data);
    my @temp_data3 = generate_initial_values(@temp_data2);

    add_shiai_to_db(@temp_data3);
    create_shiai_db_files(@temp_data3);
}

print end_html;   

# Sub routines
# --------------

sub get_user_data {
    my @internal_user_data = @_;
    my $entered_id = $internal_user_data[0];

    my $dbh = DBI->connect('dbi:AnyData(RaiseError=>1):');
    $dbh->func( 'users', 'CSV', 'data/users_csv', 'ad_catalog' );

    # select from the datafile the id for the user ID from the array 
    # passed from the previous sub routine
    my @parameters = ($entered_id);
    my $sql = "SELECT * FROM users WHERE id = ?";

    my $sth = $dbh->prepare($sql);
    $sth->execute(@parameters);   

    my @result = $sth->fetchrow_array;
    $dbh->disconnect();
    return (@result);
}

sub shiai_count {
    # This sub rotine gets the Judoka the user has from
    # judoka_csv file and returns the number

    my @internal_shiai_data = @_;
    my $entered_id = $internal_shiai_data[0];

    my $dbh = DBI->connect('dbi:AnyData(RaiseError=>1):');
    $dbh->func( 'shiai_db', 'CSV', 'data/shiai_csv', 'ad_catalog' );

    my $sql = "SELECT * FROM shiai_db WHERE owner_id = ?";
    my @params = ($entered_id);

    my $sth = $dbh->prepare($sql);  
    $sth->execute(@params);         

    my $row_count = 0;
    my @results;                    
    while ( @results = $sth->fetchrow_array ) {
        $row_count++;
    }

    $dbh->disconnect();
    return ($row_count);
}

sub print_shiai_data_form {
# Data fields:  owner_id,shiai_id,name,closedate,type,eventdate,admins_name,active,earnings,cash,entry_fee,createdate,first_prize,second_prize,third_prize,fourth_prize,fith_prize,description
#                   1         2     3       4      5      6          7         8      9      10       11       12          13           14          15          16          17          18
#                                   *       *      *      *                                           *                     *            *           *           *           *           *
# All the fields with "*" under them are  generated by the user
# The numbers indicate their position in the array(s)

    my @internal_shiai_data = @_;
    print hr;
    print start_form;    
    my $user_id_passed = $internal_shiai_data[0];

    print p( "Shiai Name: ", textfield("shiai_name"),
        " - This is the name of the tournament" );
    print p( "Close Date: ", textfield("closedate"),
        " - This is date that entries close to the tournament" );
    print p( "Shiai Date: ", textfield("eventdate"),
        " - the date this shiai will begin." );
    print p( "Entry Fee: ", textfield("entry_fee"),
        " - this is how much it will cost players to enter the event" );
    print p(
        "First Prize: ",
        textfield("first_prize"),
        " - This is how much the winner will receive"
    );
    print p(
        "Second Place Prize: ",
        textfield("second_prize"),
        " - This is how much the second place getter will receive"
    );
    print p(
        "Third Place Prize: ",
        textfield("third_prize"),
        " - This is how much the third place getter will receive"
    );
    print p(
        "Fourth Place Prize: ",
        textfield("fourth_prize"),
        " - This is how much the fourth place getter will receive"
    );
    print p(
        "Fifth Place Prize: ",
        textfield("fifth_prize"),
        " - This is how much the fifth place getter will receive"
    );
    print p( "Description: ",
        textfield("desc"), " - This is a short description of this event" );
    print hidden( -name => "user_id", -value => "$user_id_passed" );
    print submit( -name => 'submit button' );
    print end_form, hr;    # end the form
}

sub collect_shiai_data {
# Data fields:  owner_id,shiai_id,name,closedate,type,eventdate,admins_name,active,earnings,cash,entry_fee,createdate,first_prize,second_prize,third_prize,fourth_prize,fith_prize,description
#                   0         1    2     3        4      5          6         7      8      9       10       11          12           13          14          15          16          17
#                                  *     *        *      *                                           *                     *            *           *           *           *           *
    my @shiai_data;
    $shiai_data[0] = param("user_id");
    $shiai_data[1] = "BLANK_for_now";
    $shiai_data[2]  = param("shiai_name");
    $shiai_data[3]  = param("closedate");
    $shiai_data[4]  = "ladder";
    $shiai_data[5]  = param("eventdate");
    $shiai_data[6]  = "BLANK";
    $shiai_data[7]  = "blank";
    $shiai_data[8]  = "blank";
    $shiai_data[9]  = "BLANK";
    $shiai_data[10] = param("entry_fee");
    $shiai_data[11] = "blank";

    $shiai_data[12] = param("first_prize");
    $shiai_data[13] = param("second_prize");
    $shiai_data[14] = param("third_prize");
    $shiai_data[15] = param("fourth_prize");
    $shiai_data[16] = param("fifth_prize");
    $shiai_data[17] = param("desc");

    return (@shiai_data);
}

sub validate_shiai_data {
    # This sub routine validate the user input from collect_shiai_data
    my @internal_data = @_;

    return (@internal_data);
}

sub generate_initial_values {
# This sub routinegenerates the variable data not inputed by the user (the initial variables)
# Data fields:  owner_id,shiai_id,name,closedate,type,eventdate,admins_name,active,earnings,cash,entry_fee,createdate,first_prize,second_prize,third_prize,fourth_prize,fith_prize,description
#                   0         1    2     3        4      5          6         7      8      9       10       11          12           13          14          15          16          17
#                                  *     *        *      *                                           *                     *            *           *           *           *           *
# All the fields with "*" under them are  generated by the user
# The numbers indicate their position in the array(s)
# user_id is already in the data array at this stage.

    my @internal_shiai_data = @_;
    $internal_shiai_data[1] = $internal_shiai_data[0]
        . $internal_shiai_data[2];

    $internal_shiai_data[6]
        = "for now just an abitrary data filed till I pass the users name OK!";
    $internal_shiai_data[7]  = "NO";
    $internal_shiai_data[8]  = 0;
    $internal_shiai_data[9]  = 0;
    $internal_shiai_data[11] = gmtime();

    return (@internal_shiai_data);
}

sub add_shiai_to_db {
    my @internal_shiai_data = @_;

    my $entered_shiai_id = $internal_shiai_data[1];

    my $dbh = DBI->connect('dbi:AnyData(RaiseError=>1):');
    $dbh->func( 'shiai_db', 'CSV', 'data/shiai_csv', 'ad_catalog' );

    # select from the datafile the id for the user ID from 
    # the array paased from the previous sub routine
    my $sql = "SELECT * FROM shiai_db WHERE shiai_id = ?";
    my $params = ($entered_shiai_id);

    my $sth = $dbh->prepare($sql);  
    $sth->execute($params);         

    my @result = $sth->fetchrow_array;
    $dbh->disconnect();

    if (@result) {  
        print p("Sorry this shiai ID is in use already");
    }
    else {
        # if the shiai_id does not exist then add the shiai!
        # so connect to the database
        my $dbh = DBI->connect('dbi:AnyData(RaiseError=>1):');
        $dbh->func( 'shiai_db', 'CSV', 'data/shiai_csv', 'ad_catalog' );

        # add the data into a new record
        my $sql
            = "INSERT INTO shiai_db VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,? )";
        my @shiai_params = (@internal_shiai_data);

        my $sth = $dbh->prepare($sql); 
        $sth->execute(@shiai_params);  

        print p("Shiai Created");      
        print p("-> <a href=main_menu.cgi?id=$internal_shiai_data[0];>Click HERE to continue</a>");
    }
}

sub create_shiai_db_files {
    # This sub looks at the type of the shiai and calls subs to create the data for it
    # Basically it creates database tables.

    my @the_shiai_data = @_;  
    my $shiai_type = $the_shiai_data[4]; 

    my $flag = "0";  # This flag is zero unless a valid module has been called
    if ( $shiai_type eq "ladder" && $flag eq "0" ) {
        create_ladder_data(@the_shiai_data);
        $flag = 1; # set the flag to yes to prevent other modules being called
    }

    if ( $flag eq "0" ) {
        print p(
            "Sorry, the shiai type was invalid and things went pear shaped!");
    }
}

sub create_ladder_data {
    my @the_shiai_data = @_;
    my $shiai_ID       = $the_shiai_data[1];

    my $ladder_table
        = "data/shiai_data/"
        . $shiai_ID
        . "_ldr";    # eg: data/shiai_data/userTest.ldr the ladder itself
    my $history_table   = "data/shiai_data/" . $shiai_ID . "_hst";
    my $challenge_table = "data/shiai_data/" . $shiai_ID . "_chal";
    print p( " table name = ", $ladder_table ) if $DEBUG;

    # Okay now we must create the database files (three)
    # here is the DBI/SQL code
    # ----------------------------------------------------

    my @ladder_fields
        = qw/ player_name ID position fights wins joined_date date_last_fight /;
    my %ladder_field_def = (
        player_name     => 'char(20)',
        ID              => 'char(20)',
        position        => 'char(20)',
        fights          => 'char(20)',
        wins            => 'char(20)',
        joined_date     => 'char(20)',
        date_last_fight => 'char(20)'
    );

    my @history_fields    = qw/ date_time activity description /;
    my %history_field_def = (
        date_time   => 'char(20)',
        activity    => 'char(20)',
        description => 'char(20)'
    );

    my @challenge_fields    = qw/ challenger opponent_id accepted /;
    my %challenge_field_def = (
        challenger  => 'char(20)',
        opponent_id => 'char(20)',
        accepted    => 'char(20)'
    );

    my $dbh = DBI->connect('dbi:AnyData(RaiseError=>1):')
        or die "Can not create database connection";

    # build the LADDER table using SQL
    # ---------------------------------
    $dbh->do(
        "CREATE TABLE ladder ("
            . join( ',',
            map { $_ . ' ' . $ladder_field_def{$_} } @ladder_fields )
            . ")"
    ) or die "Can not create table";

    unlink $ladder_table;    # delete existing csv file if any
    $dbh->func( 'ladder', 'CSV', $ladder_table, 'ad_export' );

    # build the HISTORY table using SQL
    # ---------------------------------
    $dbh->do(
        "CREATE TABLE history ("
            . join( ',',
            map { $_ . ' ' . $history_field_def{$_} } @history_fields )
            . ")"
    ) or die "Can not create table";

    unlink $history_table;    # delete existing csv file if any
    $dbh->func( 'history', 'CSV', $history_table, 'ad_export' );

    # build the CHALLENGE table using SQL
    # ---------------------------------
    $dbh->do(
        "CREATE TABLE challenge ("
            . join( ',',
            map { $_ . ' ' . $challenge_field_def{$_} } @challenge_fields )
            . ")"
    ) or die "Can not create table";

    unlink $challenge_table;    # delete existing csv file if any
    $dbh->func( 'challenge', 'CSV', $challenge_table, 'ad_export' );

    $dbh->disconnect();
}

# ---------------------------------------------
# create_shiai.cgi   - Create by Lance Wicks
#                       e-judo.sourceforge.net
# This is free open source software! Released under GPL
#
# Description:
# This script adds a new Shiai to the database
#
# How does it work?
# =================
#
#
# History:
# ========
# 9 January 2004 - Lance Wicks - File created (based on create_judoka.cgi)
# 10 January 2004 - Lance Wicks - tested and is working OK
# 12 January 2004 - Lance Wicks - Fixed bug where this script was not adding the prize values to the DB.
# 28 January 2004 - Lance Wicks - Shout out to Roger on perlMonks.org for his help with the creating of tables in DBD::ANYDATA!
# 30 January 2004 - Lance WIcks - The script now successfully creates a shiai with 3 accompanying data tables